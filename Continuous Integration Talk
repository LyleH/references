Continuous integration is easy. Download Jenkins, install, create a job, click the button, and get a nice email saying that your build is broken (assuming your build is automated). Then, fix broken tests (assuming you have tests), and get a much better looking email saying that your build is clean.


After all, we all know that unit testing is not for a team working with deadlines, right?

What is Continuous Integration?
Nowadays, software development is done in teams. We develop in feature branches and isolate changes while they are in development. Then, we merge branches into master. After every merge, we test the entire product, executing all available unit and integration tests. This is called continuous integration (aka "CI").

Sometimes, some tests fail. When this happens, we say that our "build is broken". Such a failure is a positive side effect of quality control because it raises a red flag immediately after an error gets into master. There are a few good tools on the market, which automate Jenkins, Travis, TeamCity, Circle CI etc.

Why Continuous Integration Doesn't Work?
CI is great, but the bigger the team (and the code base), the more often builds get broken. And, the longer it takes to fix them. I've seen many examples where a hard working team starts to ignore red flags, raised by Jenkins, after a few weeks or trying to keep up.

The team simply becomes incapable of fixing all errors in time. Mostly because the business has other priorities. Mostly because the business has other priorities. Product owners do not understand the importance of a "clean build" and technical leaders can't buy time for fixing unit tests. Moreover, the code that broke them was already in master and, in most cases, has been already deployed to production and delivered to end-users. What's the urgency of fixing some tests if business value was already delivered?

In the end, most development teams don't take continuous integration alerts seriously. Jenkins or Travis are just fancy tools for them that play no role in the entire development and delivery pipeline. No matter what continuous integration server says, we still deliver new features to our end-users. We'll fix our build later. And it's only logical.

What Is a Solution?
So, the solution is simple(master needs to be a read only branch) —prohibit anyone from merging anything into master and create a script that anyone can call. The script will merge, test, and commit. The script will not make any exceptions. If any branch is breaking at even one unit test, the entire branch will be rejected. In other words, we should raise that red flag before the code gets into master

Say, I'm developing a feature in my own branch. I finished the development and broke a few tests, accidentally. It happens, we all make mistakes. I can't merge my changes into master. Git simply rejects my push, because I don't have the appropriate permissions. The script will try to merge, but before pushing into master, it will run conde coverage, code quality and all tests. And if any of them break, my branch will be rejected. My changes won't be merged. Now it's my responsibility—to fix them and call the script again.


In the beginning, this approach slows down the development, because everybody has to start writing cleaner code. At the end, though, this method pays off big time.
